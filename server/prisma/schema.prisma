generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  expiresAt DateTime
  data      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])

  @@unique([userId, token])
  @@index([expiresAt])
}

model Team {
  id          Int         @id @default(autoincrement())
  name        String
  ownerEmail  String[]
  createdAt   DateTime    @default(now())
  startDate   DateTime
  endDate     DateTime
  status      TeamStatus  @default(DOING)
  picture     String
  numOfMember Int         @default(1)
  isPublish   Boolean     @default(true)
  description String?
  teamToken   TeamToken[]
  members     Member[]
}

enum TeamStatus {
  DOING
  DONE
}

model TeamToken {
  id          Int       @id @default(autoincrement())
  teamId      Int
  inviteEmail String
  value       String
  expiredAt   DateTime
  usedAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  team        Team      @relation(fields: [teamId], references: [id])
}

model Member {
  id         Int          @id @default(autoincrement())
  team       Team         @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user       User?        @relation(fields: [email], references: [email], onDelete: Cascade, onUpdate: Cascade)
  isOwner    Boolean      @default(false)
  email      String?
  teamId     Int
  joinedAt   DateTime     @default(now())
  assignedBy String?
  status     MemberStatus @default(JOINED)

  @@unique([email, teamId])
}

enum MemberStatus {
  PENDING_INVITATION
  JOINED
}

model User {
  id        Int          @id @default(autoincrement())
  email     String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  isAdmin   Boolean      @default(false)
  status    String       @default("NotInitiated")
  session   Session[]
  profile   UserProfile?
  members   Member[]

  @@index([email])
}

model UserProfile {
  id           Int              @id @default(autoincrement())
  User         User             @relation(fields: [userId], references: [id])
  userId       Int
  name         String           @default("Unknown")
  nickname     String           @default("Unknown")
  picture      String
  gender       String           @default("Unspecified")
  workplace    String?
  address      String?
  userStatus   UserOnlineStatus @default(OFFLINE)
  school       String?
  introduction String?
  phoneNumber  String?
  talents      String?
  interests    String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@unique([userId])
}

enum UserOnlineStatus {
  ONLINE
  OFFLINE
}

// model Contact {
// 	id				Int			@id	@default(autoincrement())
// 	userProfileId	Int
// 	firstName		String
// 	middleName		String
// 	lastName		String
// 	phoneNumbers	String[]
// 	email			String
// }

// model UserStatus {
// 	id 				Int 		@id @default(autoincrement())
// 	status 			String
// 	updateTime 		DateTime	@updatedAt
// }

// model Gender {
// 	id				Int			@id	@default(autoincrement())
// 	type			String

// 	@@unique([type])
// }
