generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String
  expiresAt DateTime
  data      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, token])
  @@index([expiresAt])
}

model Team {
  id          String       @id @default(uuid())
  name        String
  ownerEmail  String[]
  createdAt   DateTime     @default(now())
  startDate   DateTime
  endDate     DateTime
  picture     String
  numOfMember Int          @default(1)
  isPublic    Boolean      @default(true)
  description String?
  status      TeamStatus   @default(DOING)
  members     Member[]
  InviteLink  InviteLink[]
}

enum TeamStatus {
  DOING
  DONE
}

model InviteLink {
  id        String    @id @default(uuid())
  teamId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime
  type      TypeToken @default(INVITE)
  team      Team      @relation(fields: [teamId], references: [id])
}

enum TypeToken {
  INVITE
}

model Member {
  id                  String   @id @default(uuid())
  userId              String
  teamId              String
  isOwner             Boolean  @default(false)
  isPendingInvitation Boolean  @default(false)
  isGuess             Boolean  @default(false)
  invitedBy           String?
  joinedAt            DateTime @default(now())
  role                String?
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  team                Team     @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, teamId])
}

model Notification {
  id           String  @id @default(uuid())
  userId       String
  title        String
  description  String
  linkRedirect String?
  isSeen       Boolean
  user         User    @relation(fields: [userId], references: [id])
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  isAdmin      Boolean        @default(false)
  userStatus   UserStatus     @default(OFFLINE)
  session      Session[]
  profile      UserProfile?
  members      Member[]
  Notification Notification[]

  @@index([email])
}

model UserProfile {
  id           String   @id @default(uuid())
  userId       String
  name         String
  nickname     String
  picture      String
  workplace    String?
  address      String?
  school       String?
  introduction String?
  talents      String?
  interests    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  gender       Gender   @default(UNSPECIFIED)
  user         User     @relation(fields: [userId], references: [id])

  @@unique([userId])
}

enum Gender {
  UNSPECIFIED
  MALE
  FEMALE
}

enum UserStatus {
  ONLINE
  OFFLINE
}
