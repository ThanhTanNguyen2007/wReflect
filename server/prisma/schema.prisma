generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String
  expiresAt DateTime
  data      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, token])
  @@index([expiresAt])
}

model Team {
  id          String       @id @default(uuid())
  name        String
  ownerId     String
  createdAt   DateTime     @default(now())
  startDate   DateTime
  endDate     DateTime
  picture     String
  isPublic    Boolean      @default(true)
  description String?
  status      TeamStatus   @default(DOING)
  members     Member[]
  InviteLink  InviteLink[]
  boards      Board[]
  Owner       User         @relation(fields: [ownerId], references: [id])
}

model Board {
  id              String    @id @default(uuid())
  teamId          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdBy       String
  isPublic        Boolean   @default(true)
  isLocked        Boolean   @default(false)
  disableDownVote Boolean   @default(false)
  disableUpVote   Boolean   @default(false)
  isAnonymous     Boolean   @default(false)
  votesLimit      Int       @default(25)
  currentColumnId String?
  title           String
  timerInProgress Boolean   @default(false)
  type            BoardType @default(PHASE)
  currentPhase    PhaseType @default(REFLECT)
  endTime         DateTime?
  team            Team      @relation(fields: [teamId], references: [id])
  columns         Column[]
}

enum BoardType {
  DEFAULT
  PHASE
}

enum PhaseType {
  REFLECT
  GROUP
  VOTES
  DISCUSS
}

model Column {
  id       String    @id @default(uuid())
  color    String    @default("white")
  title    String
  isActive Boolean   @default(true)
  position Int
  opinions Opinion[]
  boardId  String
  board    Board     @relation(fields: [boardId], references: [id])
}

model Opinion {
  id            String        @id @default(uuid())
  columnId      String?
  authorId      String
  memberId      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  text          String
  upVote        String[]
  downVote      String[]
  updatedBy     String
  isAction      Boolean       @default(false)
  isBookmarked  Boolean       @default(false)
  responsible   String        @default("not-assigned")
  mergedAuthors String[]
  color         String        @default("pink")
  position      Int
  status        OpinionStatus @default(NEW)
  author        User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  member        Member        @relation(fields: [memberId], references: [id], onDelete: Cascade)
  column        Column?       @relation(fields: [columnId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  remarks       Remark[]
}

// enum ColorPicker {
//   PINK
//   GRAY
//   GREEN

// }

model Remark {
  id        String   @id @default(uuid())
  memberId  String
  authorId  String
  opinionId String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  opinion   Opinion  @relation(fields: [opinionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum OpinionStatus {
  NEW
  IN_PROGRESS
  DONE
  REJECTED
}

enum TeamStatus {
  DOING
  DONE
}

model InviteLink {
  id        String    @id @default(uuid())
  teamId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime
  type      TypeToken @default(INVITE)
  team      Team      @relation(fields: [teamId], references: [id])
}

enum TypeToken {
  INVITE
}

model Member {
  id                  String    @id @default(uuid())
  userId              String
  teamId              String
  isOwner             Boolean   @default(false)
  isPendingInvitation Boolean   @default(false)
  isGuess             Boolean   @default(false)
  invitedBy           String?
  joinedAt            DateTime  @default(now())
  role                String?
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  team                Team      @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Opinion             Opinion[]
  Remark              Remark[]

  @@unique([userId, teamId])
}

model Notification {
  id           String  @id @default(uuid())
  userId       String
  title        String
  description  String
  linkRedirect String?
  isSeen       Boolean
  user         User    @relation(fields: [userId], references: [id])
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  isAdmin      Boolean        @default(false)
  userStatus   UserStatus     @default(OFFLINE)
  name         String         @db.VarChar(100)
  nickname     String         @db.VarChar(150)
  picture      String         @db.VarChar(500)
  session      Session[]
  profile      UserProfile?
  members      Member[]
  Notification Notification[]

  Team    Team[]
  Opinion Opinion[]
  Remark  Remark[]
  @@index([email])
}

model UserProfile {
  id           String   @id @default(uuid())
  userId       String
  workplace    String?  @db.VarChar(300)
  address      String?  @db.VarChar(300)
  school       String?  @db.VarChar(300)
  introduction String?  @db.VarChar(500)
  talents      String?  @db.VarChar(500)
  interests    String?  @db.VarChar(500)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  gender       Gender   @default(UNSPECIFIED)
  user         User     @relation(fields: [userId], references: [id])

  @@unique([userId])
}

enum Gender {
  UNSPECIFIED
  MALE
  FEMALE
}

enum UserStatus {
  ONLINE
  OFFLINE
}
